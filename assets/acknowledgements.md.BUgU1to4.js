import{_ as t,c as r,ai as o,o as a}from"./chunks/framework.BtepRFRs.js";const m=JSON.parse('{"title":"Acknowledgements","description":"","frontmatter":{},"headers":[],"relativePath":"acknowledgements.md","filePath":"acknowledgements.md"}'),s={name:"acknowledgements.md"};function n(i,e,d,c,l,p){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to &quot;Acknowledgements&quot;">â€‹</a></h1><p><a href="https://github.com/innolitics/dicom-standard/tree/master" target="_blank" rel="noreferrer"><strong><code>innolitics/dicom-standard</code></strong></a>. This JSON version of the DICOM standard is used for code generation in the DICOM dictionary.</p><p><a href="https://github.com/malaterre/GDCM" target="_blank" rel="noreferrer"><strong><code>GDCM</code></strong></a>. This project&#39;s list of well-known privately defined data elements is used for code generation in the DICOM dictionary.</p><p><a href="https://github.com/pydicom/pydicom" target="_blank" rel="noreferrer"><strong><code>pydicom</code></strong></a>. This DICOM implementation and its suite of test DICOM files are used as part of the validation process.</p><p><a href="https://github.com/fo-dicom/fo-dicom" target="_blank" rel="noreferrer"><strong><code>fo-dicom</code></strong></a>. This DICOM library&#39;s test DICOM files are used as part of the validation process.</p><p><a href="https://aflplus.plus" target="_blank" rel="noreferrer"><strong><code>AFLplusplus</code></strong></a>. This excellent fuzzing library was used to identify a number of crashes and correctness issues in DCMfx.</p>',6)]))}const g=t(s,[["render",n]]);export{m as __pageData,g as default};
