import{_ as a,c as r,a4 as s,o as t}from"./chunks/framework.CQS5UjL2.js";const m=JSON.parse('{"title":"Design","description":"","frontmatter":{},"headers":[],"relativePath":"design.md","filePath":"design.md"}'),n={name:"design.md"};function i(o,e,l,d,g,p){return t(),r("div",null,e[0]||(e[0]=[s('<h1 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-label="Permalink to &quot;Design&quot;">​</a></h1><p>DCMfx&#39;s design is focused around streaming DICOM data, i.e. all operations are performed in a streaming fashion wherever possible, enabling fast operation while with extremely low memory usage regardless of DICOM or data set size.</p><p>Loading DICOM data sets completely into memory is also supported, if preferred.</p><h2 id="languages" tabindex="-1">Languages <a class="header-anchor" href="#languages" aria-label="Permalink to &quot;Languages&quot;">​</a></h2><p>DCMfx is dual-implemented in two languages: <a href="https://gleam.run" target="_blank" rel="noreferrer">Gleam</a> and <a href="https://rust-lang.org" target="_blank" rel="noreferrer">Rust</a>. See <a href="./libraries/overview#languages">here</a> for more details.</p>',5)]))}const u=a(n,[["render",i]]);export{m as __pageData,u as default};
